<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAHyAAAAEAIAAoEAAAFgAAACgAAAAfAAAAQAAAAAEAIAAAAAAAgA8AABMLAAATCwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA4TpUAN87WgDgPFwA4jxdAOI9XQDhPV0A4jxeAOI+XwDiPl8A4j9gAOQ+
        YADqRWYA9UZ2AP+q/wDQMD8C1zJFA9wwSAXbMU0H1itMA9NHUQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA3jdWAOI7TgPeN1Qz3zZVUOE2VlbjNlda4DZWX+E1V2ThN1dp4DdYb+E3
        WHjgN1iA4TdZh+M4WYvhOFeQ4ThZlOI5WpniOluc4jxdod89Wl/LT1ICAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAN46WQLfN1VY3VBr4d1kffXdZ4D33WmB+Nxrg/ncbYT723GH/Np1
        i/7ZeY7/2H2Q/9h/kv/YgpT/14SV/9eGl//WiJn/142d/9+BlP/iT2XN10JPFwAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAOQ4VgDfNVM42k1m3c2jqv/JwcP/ycHD/8nCw//IwsT/yMPE/8fE
        xf/HxcX/xsbG/8bHx//Gx8f/xcjH/8XIx//EyMf/w8jH/8TJyP/RwMP/4mx39N1LUlLWT0UAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADmN1YI2jhUnch2g/+/tbb/wLO1/8Cxs//Ar7L/wK6x/7+s
        r/+/qq7/v6mt/76nq/++pqr/v6Oo/8CepP/BmaH/wpae/8GSmv+2n6T/wcHC/96TlP/gWFae1U5HBgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5D1dFN4/Xc7VVm7/1V52/9hac//ZV3L/21Vx/9tU
        cP/cVHD/3VNv/95Rbv/gUG7/4VBu/+JObf/jTW3/405t/+RNbf/kS2r/yW19/7e2tv/VtLH/4m1i3dlY
        SyjHWk4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOlScQbrV3Oc7FZz/+xWc//sV3P/7Fhz/+xY
        c//sWXT/7Fp0/+xadP/sW3T/7Ft0/+xddf/tXXT/7F10/+xddP/sXXT/7Vxz/9xdbP+1oaL/ycPC/+GK
        efvcYktruE5aAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADrQW4A7GRzUOxlc/TsZXL/7GVz/+xl
        cv/sZnL/7GZy/+xmcv/sZ3H/7Gdx/+xncf/saHH/62hx/+tocf/raHH/62hx/+xrdP/ob3b/v4mK/72/
        v//bqpv/33FRttFfRA0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5XN1AO1ubxnrbm/L625v/+tu
        bv/rbm3/625t/+tvbv/rb23/629t/+twbf/rcG3/63Ft/+twbP/rcGz/63Ft/+txbP/vjIf/98LB/9WX
        lf+1rq7/0cC4/+CGYOzZakQ9zmo/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADrdW0C6nZsg+t4
        bP7wnJT/9Lax//Gdlf/sgHT/75WL/++Tif/sf3H/7H1u/+t8bf/uj4P/8J6T/+6QhP/sgXL/7o+B//jN
        yP/oqqH/tpqW/8TDwv/foX3+3HZEh8pmQAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA63JuAOt9
        aTrrfmbr9cK2//jVy//zsqL/8q+g//XBtP/3y8D/8q6e//Cfi//ulH3/983C//fRx//0u63/75yH//Kq
        l//3zsP/8bKh/8SJev+5urz/2Lmi/9+GS83UbzoZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AADqhWUM6oNhtPO5pf/ysJn/75x///bKu//1wrH/9MKv//fQw//zuKL/8amP//bJt//30sP/98+///XC
        rv/2ybf/9cSv//S7pP/Vg2X/tKqo/83FvP/gm2D12n06VNR5LAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAA//97AOqJXGfytpn68raZ/+yacP/0xKz/99PB//fRv//418b/+NrM//bPuv/1zLf/9s+6//XJ
        sP/42cf/87+h//Gyjv/wrIT/4ohZ/7uajP/BwsL/3LGE/92JO5/QcjgHAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAOuIZgDoilIl8bWP3PK8mf/rmWT/8sCf//faxv/zwJ3/7qh4//Cyh//tpHH/77CD/++u
        gP/snWX/65xj/+qWW//qllr/6pZa/+mRVP/Jj23/trW2/9TCqv/fmUff1YEyKLpoVAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA5X83Bu+vfZvvtIP/6phV/+yhY//zxZ7/7KVq/+qYU//qmFP/6phU/+qZ
        VP/qmVP/6plU/+qaVf/qmlX/6ppT/+qaU//qmlP/2o9V/7Wnnv/Jxr//3qth+9mLL2+zXl8BAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAOmYYwDqn1hP6qBX9OqeUf/qnlP/66JY/+qeUv/qnlD/6p5R/+qe
        UP/qn1D/6p5Q/+qhVf/qoVX/6p5P/+ynX//sqmb/6qBQ/+SYS/++mn7/vL6//9m9iv/dmDS6z4ExDwAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADiZQcA6p5QFumiTsfpok3/6aJN/+miTP/rqlz/7bRv/+mi
        S//rrmH/6qZT/+64dv/11rD/886h/+yvZP/11q//996+/+yvYv/poUf/z5Zc/7Swrv/Qx7L/3qhD7NaP
        KD7OhTMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOyhTALppUuA6aZJ/emmSP/ppkb/7754//XW
        qv/pqEr/886a/+/AfP/116v/9NSk//PPmv/xxob/8s6W//fgvP/uumz/6adE/92cRf+2pJH/xMPB/9y4
        Z/7ZmSWIzIEzAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADroU4A6qlHN+mqROjpqkT/6alB/+/A
        c//34sD/67JS//bcsf/12qv/9Nak//jkwP/34Lj/8ciC//XarP/126z/67RV/+msQP/mpzz/w51s/7i5
        u//WxJX/3KYsz9KQJhrGgzsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOmsRQzorkCx6K4+/+mt
        PP/uwmz/+u/Z/+6/Zv/237H/9uC0//TXnf/02KH/9+C1//Xerv/5683/89WZ//TXn//psT//6K45/9Sg
        Sf+0raX/zMi4/920QvbWmx1W5MUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADw2sUA6bE8Zuix
        OfrosDX/8c+D//vy3f/13qr/9+S4//Tan//026H/9Nyi//fluP/uxmj/89ma//jpxv/w0IH/6LM4/+iz
        Nf/gqTT/uaSC/8DBwf/bwW7/2qUbpMuPKQoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA7bZeAOi0
        OCPotDPa6LUz//Xdo//24az/+u/S//jqxP/uymr/8taL/+m4Of/puDn/6LUw/+m6PP/rwE3/6Lcz/+i2
        MP/otjH/57Ms/8ijWf+2tLT70sKG3tuuIKfOmCQTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AADquDUF57Yulum7Nv/357f/8NJ6//Xgof/04KL/6Low/+m8N//otyz/6Lcr/+i4K//ouCr/57cp/+i4
        Kv/nuCr/57kq/+i4KP/YqjT9t6iLociycingsBEV47UiAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAA67c2AOa4KkzovC7z8NR0/+rFRv/qw0D/68VH/+e7Jf/nuiX/57ol/+e7Jf/nuyT/57sk/+e7
        JP/nuyT/57sk/+e7JP/nuyP/47Qg/NWgJHPOvXEA4K8RAOO0IgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAADnuicV57wix+e8H//nvB//57we/+e8Hf/nvR//570f/+e9H//nvR//570f/+e9
        Hv/nvR7/570e/+e9Hv/nvR7/5r0e/+W8HP/bqh2vyY0xCwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA47gsAea9H2vmvRzG5rwbw+a9HL/lvBy75b0ctOW9G63lvBqm5bwboOW9
        G5vlvBuX5bwck+W7HI7luxyJ5rwchOW7G3/kuxt537McUMmQLwUAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAOS5KwDlth0I4rYbFeK2GxPmuRwR5bQcD+G0HQzhtB0I26saBMiP
        GAH63RoA8cATAPTIGwDnvhwA574cAOW6HgDlwR0A5r4aANyuHgDJjjIAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5bceAOO3GwDjtxsA5rocAOW2HADith0A47cdAOCz
        GwDfsRsA37EdAMO2PQAHDjYAAAAAAAAAAAD//wAA/5AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAP//wf7wAAD+4AAA/uAAAP7AAAB+wAAAfsAAAH7gAAA+4AAAPuAAAB7wAAAe8AAAHvgA
        AA74AAAO+AAABvwAAAb8AAAG/AAAAv4AAAL+AAAC/wAAAP8AAAD/AAAA/4AADv+AAAb/gAAG/8Af/v//
        //7////+/////v////7////+
</value>
  </data>
</root>